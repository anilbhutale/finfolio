name: Deploy Application

on:
  push:
    branches:
      - main  # Change this to your default branch if it's not `main`

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Install SSH Client
      - name: Install SSH Client
        run: |
          echo "Installing SSH Client"
          sudo apt-get install -y openssh-client
          echo "SSH Client installation completed"

      # Create .ssh directory and add the SSH Host key to known_hosts
      - name: Setup SSH and known_hosts
        run: |
          echo "Setting up SSH and known_hosts"
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "Adding SSH host key for ${ { secrets.DO_HOST } } to known_hosts"
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts
          echo "SSH host key added successfully"

      # Deploy to DigitalOcean
      - name: Deploy to DigitalOcean
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DO_SSH_PRIVATE_KEY }}  # Ensure this secret is added in GitHub Secrets
        run: |
          echo "Preparing to deploy to DigitalOcean"

          # Create .ssh directory and configure the private key for SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "SSH private key configured successfully"

          # SSH into the server and execute deployment steps
          echo "Connecting to ${ { secrets.DO_USER } }@${ { secrets.DO_HOST } } on port 5417"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} -p 5417 << 'EOF'
            set -e  # Exit on any error
            echo "Starting deployment..."
            if [ -d /mnt/dev/finfolio ]; then
              echo "Directory /mnt/dev/finfolio exists. Proceeding with deployment."
              cd /mnt/dev/finfolio
              if [ -d .git ]; then
                echo "Git repository found. Pulling latest changes from main..."
                git pull origin main  # Update your codebase if it's a Git repository
                echo "Git pull completed successfully."
                
                echo "Shutting down existing Docker containers..."
                docker-compose -f docker-compose.prod.yml down
                echo "Docker containers shut down."
                
                echo "Pulling new Docker images..."
                docker-compose -f docker-compose.prod.yml pull
                echo "Docker images pulled successfully."

                echo "Building new Docker images..."
                docker-compose -f docker-compose.prod.yml build
                echo "Docker images built successfully."

                echo "Starting up Docker containers..."
                docker-compose -f docker-compose.prod.yml up -d
                echo "Docker containers started successfully."
              else
                echo "Not a git repository, skipping git pull"
              fi
            else
              echo "Directory /mnt/dev/finfolio does not exist"
              exit 1
            fi
          EOF
          echo "Deployment process completed successfully."
